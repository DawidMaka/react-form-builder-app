{"version":3,"sources":["theme/mainTheme.tsx","theme/GlobalStyle.tsx","templates/MainTemplate.tsx","context/index.tsx","components/Heading/Heading.tsx","components/Button/Button.tsx","templates/FormsTemplate.tsx","components/Label/Label.tsx","components/Input/Input.tsx","base/types.tsx","components/Select/Select.tsx","components/Form/Form.tsx","components/FormsList/FormsList.tsx","views/Forms.tsx","utils/index.tsx","views/Root.tsx","index.tsx"],"names":["theme","remove","add","GlobalStyle","createGlobalStyle","MainTemplate","children","displayName","PageContext","React","createContext","undefined","Heading","styled","h1","StyledButton","button","mr","Button","memo","props","FormsTemplate","addItemFn","onClick","type","StyledLabel","label","Label","htmlFor","Input","Values","Select","parenttype","value","name","ConditionType","Number","ConditionValue","StyledForm","div","FormFields","ButtonsWrapper","Form","id","question","parentType","conditionType","conditionValue","context","useContext","useMemo","className","onChange","e","target","handleUpdateItem","autoComplete","placeholder","handleAddItem","handleRemoveItem","FormWrapper","FormList","forms","map","form","key","items","convertItems","reduce","result","originalItem","item","parent","subItems","length","addItem","newItem","uuidv4","Forms","localStorageKey","useState","JSON","parse","localStorage","getItem","setValue","useEffect","setItem","stringify","useStateWithLocalStorage","setItems","Provider","removeItem","filtered","filter","child","updateItem","FormsList","Root","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.82e399a6.chunk.js","sourcesContent":["import { DefaultTheme } from 'styled-components';\n\nexport const theme: DefaultTheme = {\n  remove: '#d43f3a',\n  add: '#4cae4c',\n};\n","import { createGlobalStyle } from 'styled-components';\n\nconst GlobalStyle = createGlobalStyle`\n\t*, *::before, *::after {\n\t\tbox-sizing: border-box;\n\t\t-webkit-font-smoothing: antialiased;\n  \t-moz-osx-font-smoothing: grayscale;\n\t}\n\n\thtml {\n\t\tfont-size: 62.5%;\n\t}\n\n\tbody {\n\t\tfont-size: 1.4rem;\n\t\tfont-family: \"Montserrat\", monospace;\n\t}\t\n\n  main {\n    margin: 8px;\n  }\n\n  .form-control {\n    width: 80%;\n    height: 34px;\n    padding: 6px 12px;\n    font-size: 13px;\n    line-height: 1.42857143;\n    color: #555;\n    background-color: #fff;\n    background-image: none;\n    border: 1px solid black;\n    border-radius: 4px;\n    box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075);\n  }\n\n  select[name='conditionType'] {\n    width: 45%;\n    margin-right: 2%;\n  }\n\n  input[name='conditionValue'], select[name='conditionValue'] {\n    width: 33%;\n  }\n\n  .sr-only {\n    position: absolute;\n    width: 1px;\n    height: 1px;\n    padding: 0;\n    overflow: hidden;\n    clip: rect(0, 0, 0, 0);\n    white-space: nowrap;\n    border: 0;\n  }\n`;\n\nexport default GlobalStyle;\n","import React from 'react';\nimport { ThemeProvider } from 'styled-components';\nimport { theme } from 'theme/mainTheme';\nimport GlobalStyle from 'theme/GlobalStyle';\n\nconst MainTemplate = ({ children }: { children: React.ReactNode }) => (\n  <main>\n    <GlobalStyle />\n    <ThemeProvider theme={theme}>{children}</ThemeProvider>\n  </main>\n);\nMainTemplate.displayName = 'MainTemplate';\n\nexport default MainTemplate;\n","import React from 'react';\nimport { ItemKeys } from 'base/types';\n\ntype State = {\n  handleAddItem: (parent: string) => void;\n  handleRemoveItem: (id: string) => void;\n  handleUpdateItem: (name: ItemKeys, value: string, id: string) => void;\n};\n\nconst PageContext = React.createContext<State | undefined>(undefined);\n\nexport default PageContext;\n","import styled from 'styled-components';\n\nconst Heading = styled.h1`\n  font-size: 2em;\n  margin: 0.67em 0;\n`;\nHeading.displayName = 'Heading';\n\nexport default Heading;\n","import React, { ComponentProps } from 'react';\nimport styled from 'styled-components';\n\nconst StyledButton = styled.button<{ remove: boolean; mr: string }>`\n  color: #fff;\n  background-color: ${({ remove, theme }) => (remove ? theme.remove : theme.add)};\n  border: 1px solid transparent;\n  border-radius: 4px;\n  display: inline-block;\n  padding: 6px 12px;\n  margin-bottom: 0;\n  margin-right: ${({ mr }) => mr};\n  font-size: 14px;\n  font-weight: 400;\n  line-height: 1.42857143;\n  text-align: center;\n  white-space: nowrap;\n  vertical-align: middle;\n  touch-action: manipulation;\n  cursor: pointer;\n  user-select: none;\n  background-image: none;\n`;\n\ntype ButtonProps = ComponentProps<typeof StyledButton>;\n\nconst Button = React.memo<ButtonProps>(({ ...props }) => {\n  return <StyledButton {...props} />;\n});\nButton.displayName = 'Button';\n\nexport default Button;\n","import React from 'react';\nimport Heading from 'components/Heading/Heading';\nimport Button from 'components/Button/Button';\n\ntype FormsTemplateProps = {\n  addItemFn: (value: string) => void;\n};\n\nconst FormsTemplate = ({ children, addItemFn }: React.PropsWithChildren<FormsTemplateProps>) => (\n  <>\n    <Heading>Form Builder</Heading>\n    {children}\n    <Button onClick={() => addItemFn('-1')} type=\"button\">\n      Add Input\n    </Button>\n  </>\n);\nFormsTemplate.displayName = 'FormsTemplate';\n\nexport default FormsTemplate;\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst StyledLabel = styled.label`\n  width: 19%;\n  display: inline-block;\n  font-weight: 700;\n  text-transform: capitalize;\n`;\n\ntype LabelProps = {\n  htmlFor: string;\n  className?: string;\n};\n\nconst Label = React.memo<React.PropsWithChildren<LabelProps>>(({ htmlFor, ...props }) => (\n  <StyledLabel htmlFor={htmlFor} {...props} />\n));\nLabel.displayName = 'Label';\n\nexport default Label;\n","import React from 'react';\n\nconst Input = React.memo<JSX.IntrinsicElements['input']>(({ ...props }) => <input {...props} />);\nInput.displayName = 'Input';\n\nexport default Input;\n","export type ItemKeys = Values.Question | Values.Type | Values.ConditionType | Values.ConditionValue;\n\nexport enum Values {\n  Question = 'question',\n  Type = 'type',\n  ConditionType = 'conditionType',\n  ConditionValue = 'conditionValue',\n  Number = 'number',\n}\n\nexport interface Item {\n  id: string;\n  parent: string;\n  question: string;\n  type: string;\n  conditionType?: string;\n  conditionValue?: string;\n}\n\nexport interface Items extends Item {\n  items?: Items[];\n}\n","import React from 'react';\nimport { Values } from 'base/types';\n\nconst Select = React.memo<JSX.IntrinsicElements['select'] & { parenttype?: string; name: string }>(\n  ({ ...props }) => (\n    <select {...props}>\n      {!props.parenttype && (\n        <>\n          <option value=\"text\">Text</option>\n          <option value=\"yes/no\">Yes/no</option>\n          <option value=\"number\">Number</option>\n        </>\n      )}\n      {props.name === Values.ConditionType && <option value=\"equals\">Equals</option>}\n      {props.parenttype === Values.Number && (\n        <>\n          <option value=\"greather than\">Greather than</option>\n          <option value=\"less than\">Less than</option>\n        </>\n      )}\n      {props.name === Values.ConditionValue && (\n        <>\n          <option value=\"yes\">Yes</option>\n          <option value=\"no\">No</option>\n        </>\n      )}\n    </select>\n  ),\n);\nSelect.displayName = 'Select';\n\nexport default Select;\n","import React, { useContext, useMemo, ChangeEvent } from 'react';\nimport styled from 'styled-components/macro';\nimport { Values } from 'base/types';\nimport Button from 'components/Button/Button';\nimport PageContext from 'context';\nimport Label from 'components/Label/Label';\nimport Input from 'components/Input/Input';\nimport Select from 'components/Select/Select';\n\nconst StyledForm = styled.div`\n  margin-bottom: 15px;\n  padding: 20px;\n  width: 530px;\n  border: 2px solid black;\n  color: black;\n  background-color: darksalmon;\n`;\n\nconst FormFields = styled.div`\n  margin-bottom: 15px;\n`;\n\nconst ButtonsWrapper = styled.div`\n  text-align: right;\n`;\n\ntype FormProps = {\n  id: string;\n  question: string;\n  type: string;\n  parentType: string;\n  conditionType?: string;\n  conditionValue?: string;\n};\n\nconst Form = ({ id, question, type, parentType, conditionType, conditionValue }: FormProps) => {\n  const context = useContext(PageContext)!;\n\n  return useMemo(\n    () => (\n      <StyledForm>\n        {parentType !== '' && (\n          <FormFields>\n            <Label htmlFor={`conditionType-${id}`}>\n              condition <span className=\"sr-only\">type</span>\n            </Label>\n            <Select\n              id={`conditionType-${id}`}\n              className=\"form-control\"\n              value={conditionType}\n              name=\"conditionType\"\n              parenttype={parentType}\n              onChange={(e: ChangeEvent<HTMLSelectElement>) => {\n                const name = e.target.name as Values.ConditionType;\n                const value = e.target.value;\n                context.handleUpdateItem(name, value, id);\n              }}\n            />\n            <Label htmlFor={`conditionValue-${id}`} className=\"sr-only\">\n              condition value\n            </Label>\n            {parentType !== 'yes/no' ? (\n              <Input\n                autoComplete=\"off\"\n                className=\"form-control\"\n                id={`conditionValue-${id}`}\n                value={conditionValue}\n                name=\"conditionValue\"\n                type={parentType === 'number' ? 'number' : 'text'}\n                placeholder=\"Enter your value\"\n                onChange={(e: ChangeEvent<HTMLInputElement>) => {\n                  const name = e.target.name as Values.ConditionValue;\n                  const value = e.target.value;\n                  context.handleUpdateItem(name, value, id);\n                }}\n              />\n            ) : (\n              <Select\n                id={`conditionValue-${id}`}\n                className=\"form-control\"\n                value={conditionValue}\n                name=\"conditionValue\"\n                parenttype={parentType}\n                onChange={(e: ChangeEvent<HTMLSelectElement>) => {\n                  const name = e.target.name as Values.ConditionValue;\n                  const value = e.target.value;\n                  context.handleUpdateItem(name, value, id);\n                }}\n              />\n            )}\n          </FormFields>\n        )}\n        <FormFields>\n          <Label htmlFor={`question-${id}`}>question</Label>\n          <Input\n            autoComplete=\"off\"\n            className=\"form-control\"\n            id={`question-${id}`}\n            value={question}\n            name=\"question\"\n            type=\"text\"\n            placeholder=\"Enter your question\"\n            onChange={(e: ChangeEvent<HTMLInputElement>) => {\n              const name = e.target.name as Values.Question;\n              const value = e.target.value;\n              context.handleUpdateItem(name, value, id);\n            }}\n          />\n        </FormFields>\n        <FormFields>\n          <Label htmlFor={`type-${id}`}>type</Label>\n          <Select\n            className=\"form-control\"\n            id={`type-${id}`}\n            value={type}\n            name=\"type\"\n            onChange={(e: ChangeEvent<HTMLSelectElement>) => {\n              const name = e.target.name as Values.Type;\n              const value = e.target.value;\n              context.handleUpdateItem(name, value, id);\n            }}\n          />\n        </FormFields>\n        <ButtonsWrapper>\n          <Button type=\"button\" mr=\"5px\" onClick={() => context.handleAddItem(id)}>\n            Add Sub-Input\n          </Button>\n          <Button type=\"button\" remove onClick={() => context.handleRemoveItem(id)}>\n            Delete\n          </Button>\n        </ButtonsWrapper>\n      </StyledForm>\n    ),\n    [id, question, type, parentType, conditionType, conditionValue],\n  );\n};\nForm.displayName = 'Form';\n\nexport default Form;\n","import React from 'react';\nimport { Items } from 'base/types';\nimport styled from 'styled-components';\nimport Form from 'components/Form/Form';\n\nconst FormWrapper = styled.div`\n  margin-left: 15px;\n`;\n\ntype FormListProps = {\n  forms: Items[];\n  parentType?: string;\n};\n\nconst FormList = ({ forms, parentType = '' }: FormListProps) => {\n  return (\n    <>\n      {forms.map(form => (\n        <FormWrapper key={form.id}>\n          <Form\n            id={form.id}\n            question={form.question}\n            type={form.type}\n            conditionType={form.conditionType}\n            conditionValue={form.conditionValue}\n            parentType={parentType}\n          />\n          {form.items && <FormList forms={form.items} parentType={form.type} />}\n        </FormWrapper>\n      ))}\n    </>\n  );\n};\nFormList.displayName = 'FormList';\n\nexport default FormList;\n","import React from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport PageContext from 'context';\nimport { Item, Items, ItemKeys } from 'base/types';\nimport FormsTemplate from 'templates/FormsTemplate';\nimport FormsList from 'components/FormsList/FormsList';\nimport { useStateWithLocalStorage } from '../utils';\n\nconst convertItems = (items: Items[], id: string) =>\n  items.reduce((result: Items[], originalItem) => {\n    const item = { ...originalItem };\n\n    if (item.parent !== id) {\n      return result;\n    }\n\n    const subItems = convertItems(items, item.id);\n\n    if (subItems.length) {\n      item.items = subItems;\n    }\n\n    return [...result, item];\n  }, []);\n\nconst removeItem = (items: Item[], id: string): Item[] => {\n  const filtered = items.filter(item => item.id !== id);\n  const children = items.filter(item => item.parent === id).map(({ id }) => id);\n\n  return children.reduce((items, child) => removeItem(items, child), filtered);\n};\n\nconst addItem = (parent: string) => {\n  const newItem: Item = {\n    id: uuidv4(),\n    question: '',\n    type: 'text',\n    parent: parent,\n  };\n\n  if (parent !== '-1') {\n    newItem.conditionType = '';\n    newItem.conditionValue = '';\n  }\n\n  return newItem;\n};\n\nfunction updateItem(name: ItemKeys, value: string, id: string, items: Items[]) {\n  const arr = items.map(item => {\n    if (item.id === id) {\n      item[name] = value;\n    }\n\n    if (item.parent === id && name === 'type') {\n      item.conditionType = '';\n      item.conditionValue = '';\n    }\n\n    return item;\n  });\n\n  return arr;\n}\n\nconst Forms = () => {\n  const [items, setItems] = useStateWithLocalStorage('data');\n\n  const handleAddItem = (parent: string) => setItems(items => [...items, addItem(parent)]);\n  const handleRemoveItem = (id: string) => setItems(items => removeItem(items, id));\n  const handleUpdateItem = (name: ItemKeys, value: string, id: string) =>\n    setItems(items => updateItem(name, value, id, items));\n\n  return (\n    <PageContext.Provider\n      value={{\n        handleAddItem,\n        handleRemoveItem,\n        handleUpdateItem,\n      }}\n    >\n      <FormsTemplate addItemFn={handleAddItem}>\n        <FormsList forms={convertItems(items, '-1')} />\n      </FormsTemplate>\n    </PageContext.Provider>\n  );\n};\nForms.displayName = 'Forms';\n\nexport default Forms;\n","import { useState, useEffect } from 'react';\nimport { Item } from 'base/types';\n\nexport const useStateWithLocalStorage = (localStorageKey: string) => {\n  const [value, setValue] = useState<Item[]>(\n    JSON.parse(localStorage.getItem(localStorageKey) || '[]'),\n  );\n\n  useEffect(() => {\n    localStorage.setItem(localStorageKey, JSON.stringify(value));\n  }, [value]);\n\n  return [value, setValue] as const;\n};\n","import React from 'react';\nimport 'normalize.css';\nimport MainTemplate from 'templates/MainTemplate';\nimport Forms from 'views/Forms';\n\nconst Root = () => (\n  <MainTemplate>\n    <Forms />\n  </MainTemplate>\n);\n\nexport default Root;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Root from './views/Root';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Root />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}